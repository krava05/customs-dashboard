# ===============================================
# app.py - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –í–µ—Ä—Å–∏—è: 4.0
# –î–∞—Ç–∞: 2025-10-09
# –û–ø–∏—Å–∞–Ω–∏–µ: 
# - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å 
#   –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç—ã—Ö —Ü–∏–∫–ª–æ–≤ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ 
#   –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.
# ===============================================

import os
import streamlit as st
from google.cloud import bigquery
import pandas as pd
import google.generativeai as genai
import json
from datetime import datetime

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(page_title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö", layout="wide")

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
PROJECT_ID = "ua-customs-analytics"
TABLE_ID = f"{PROJECT_ID}.ua_customs_data.declarations"

# --- –§–£–ù–ö–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ü–ê–†–û–õ–Æ ---
def check_password():
    def password_entered():
        if os.environ.get('K_SERVICE'):
            correct_password = os.environ.get("APP_PASSWORD")
        else:
            correct_password = st.secrets.get("APP_PASSWORD")
        if st.session_state.get("password") and st.session_state["password"] == correct_password:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False
    if st.session_state.get("password_correct", False):
        return True
    st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password")
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π.")
    return False

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í GOOGLE ---
def initialize_clients():
    if 'clients_initialized' in st.session_state:
        return
    try:
        if os.environ.get('K_SERVICE'):
            st.session_state.bq_client = bigquery.Client(project=PROJECT_ID)
            api_key = os.environ.get("GOOGLE_AI_API_KEY")
        else:
            st.session_state.bq_client = bigquery.Client()
            api_key = st.secrets.get("GOOGLE_AI_API_KEY")
        if api_key:
            genai.configure(api_key=api_key)
            st.session_state.genai_ready = True
        st.session_state.clients_initialized = True
        st.session_state.client_ready = True
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google: {e}")
        st.session_state.client_ready = False

# --- –§–£–ù–ö–¶–Ü–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ---
@st.cache_data(ttl=3600)
def run_query(query):
    if st.session_state.get('client_ready', False):
        try:
            return st.session_state.bq_client.query(query).to_dataframe()
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ BigQuery: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

# --- –§–£–ù–ö–¶–ò–Ø "AI-–ê–ù–ê–õ–ò–¢–ò–ö" ---
def get_analytical_ai_query(user_question, max_items=50):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    return None

# --- –§–£–ù–ö–¶–Ü–Ø "AI-–ü–û–ò–°–ö" ---
def get_ai_search_query(user_query, max_items=100):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    return None

# --- –ó–ê–ì–†–£–ó–ö–ê –°–ü–ò–°–ö–û–í –î–õ–Ø –§–ò–õ–¨–¢–†–û–í ---
@st.cache_data(ttl=3600)
def get_filter_options():
    options = {}
    options['direction'] = ['–Ü–º–ø–æ—Ä—Ç', '–ï–∫—Å–ø–æ—Ä—Ç']
    query_countries = f"SELECT DISTINCT kraina_partner FROM `{TABLE_ID}` WHERE kraina_partner IS NOT NULL ORDER BY kraina_partner"
    options['countries'] = list(run_query(query_countries)['kraina_partner'])
    query_transport = f"SELECT DISTINCT vyd_transportu FROM `{TABLE_ID}` WHERE vyd_transportu IS NOT NULL ORDER BY vyd_transportu"
    options['transport'] = list(run_query(query_transport)['vyd_transportu'])
    query_years = f"SELECT DISTINCT EXTRACT(YEAR FROM SAFE_CAST(data_deklaracii AS DATE)) as year FROM `{TABLE_ID}` WHERE data_deklaracii IS NOT NULL ORDER BY year DESC"
    options['years'] = list(run_query(query_years)['year'].dropna().astype(int))
    return options

# --- –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
if not check_password():
    st.stop()

st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö üìà")
initialize_clients()
if not st.session_state.get('client_ready', False):
    st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google BigQuery.")
    st.stop()

# --- –†–ê–ó–î–ï–õ: AI-–ê–ù–ê–õ–ò–¢–ò–ö ---
st.header("ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫: –ó–∞–¥–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
ai_analytical_question = st.text_area( "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...", key="ai_analytical_question")
search_button_analytical_ai = st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é AI", type="primary")
if search_button_analytical_ai and ai_analytical_question:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    pass

st.divider()

# --- –°–ï–ö–¶–ò–Ø –§–ò–õ–¨–¢–†–û–í –ò –ü–û–ò–°–ö–ê ---
st.header("üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö")
filter_options = get_filter_options()
with st.expander("–ü–∞–Ω–µ–ª—å –§–∏–ª—å—Ç—Ä–æ–≤ –∏ –ü–æ–∏—Å–∫–∞", expanded=True):
    st.subheader("–ü—Ä–æ—Å—Ç–æ–π AI-–ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∏ —Ç–æ–≤–∞—Ä–∞")
    ai_search_query_text = st.text_input("–û–ø–∏—à—ñ—Ç—å —Ç–æ–≤–∞—Ä...", key="ai_search_input")
    search_button_ai = st.button("–ù–∞–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI")
    if search_button_ai and ai_search_query_text:
        # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        pass
    st.markdown("---")
    
    st.subheader("–†—É—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
    col1, col2, col3 = st.columns(3)
    with col1:
        selected_directions = st.multiselect("–ù–∞–ø—Ä—è–º–æ–∫:", options=filter_options['direction'])
    with col2:
        selected_countries = st.multiselect("–ö—Ä–∞—ó–Ω–∞-–ø–∞—Ä—Ç–Ω–µ—Ä:", options=filter_options['countries'])
    with col3:
        selected_transports = st.multiselect("–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:", options=filter_options['transport'])

    col4, col5 = st.columns([2,1])
    with col4:
        selected_years = st.multiselect("–†–æ–∫–∏:", options=filter_options['years'], default=filter_options['years'])
    with col5:
        st.write("–í–∞–≥–∞ –Ω–µ—Ç—Ç–æ, –∫–≥")
        weight_col1, weight_col2 = st.columns(2)
        weight_from = weight_col1.number_input("–í—ñ–¥", min_value=0, step=100, key="weight_from")
        weight_to = weight_col2.number_input("–î–æ", min_value=0, step=100, key="weight_to")

    col6, col7, col8 = st.columns(3)
    with col6:
        uktzed_input = st.text_input("–ö–æ–¥ –£–ö–¢–ó–ï–î (—á–µ—Ä–µ–∑ –∫–æ–º—É):")
    with col7:
        yedrpou_input = st.text_input("–ö–æ–¥ –Ñ–î–†–ü–û–£ (—á–µ—Ä–µ–∑ –∫–æ–º—É):")
    with col8:
        company_input = st.text_input("–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó (—á–µ—Ä–µ–∑ –∫–æ–º—É):")
    
    search_button_filters = st.button("üîç –ó–Ω–∞–π—Ç–∏ –∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏", use_container_width=True)

# --- –õ–û–ì–ò–ö–ê –§–ò–õ–¨–¢–†–û–í ---
if search_button_filters:
    query_parts = []
    
    def process_text_input(input_str):
        return [item.strip() for item in input_str.split(',') if item.strip()]

    # ========================================================================
    # <<< –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –ë–õ–û–ö –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò >>>
    # ========================================================================

    if selected_directions:
        items = []
        for d in selected_directions:
            escaped_d = d.replace("'", "''")
            items.append(f"'{escaped_d}'")
        query_parts.append(f"napryamok IN ({', '.join(items)})")
    
    if selected_countries:
        items = []
        for c in selected_countries:
            escaped_c = c.replace("'", "''")
            items.append(f"'{escaped_c}'")
        query_parts.append(f"kraina_partner IN ({', '.join(items)})")

    if selected_transports:
        items = []
        for t in selected_transports:
            escaped_t = t.replace("'", "''")
            items.append(f"'{escaped_t}'")
        query_parts.append(f"vyd_transportu IN ({', '.join(items)})")

    if selected_years:
        years_str = ', '.join(map(str, selected_years))
        query_parts.append(f"EXTRACT(YEAR FROM SAFE_CAST(data_deklaracii AS DATE)) IN ({years_str})")

    if weight_from > 0:
        query_parts.append(f"SAFE_CAST(vaha_netto_kg AS FLOAT64) >= {weight_from}")
    if weight_to > 0 and weight_to >= weight_from:
        query_parts.append(f"SAFE_CAST(vaha_netto_kg AS FLOAT64) <= {weight_to}")

    uktzed_list = process_text_input(uktzed_input)
    if uktzed_list:
        conditions = []
        for item in uktzed_list:
            escaped_item = item.replace("'", "''")
            conditions.append(f"kod_uktzed LIKE '{escaped_item}%'")
        query_parts.append(f"({' OR '.join(conditions)})")

    yedrpou_list = process_text_input(yedrpou_input)
    if yedrpou_list:
        items = []
        for item in yedrpou_list:
            escaped_item = item.replace("'", "''")
            items.append(f"'{escaped_item}'")
        query_parts.append(f"kod_yedrpou IN ({', '.join(items)})")

    company_list = process_text_input(company_input)
    if company_list:
        conditions = []
        for item in company_list:
            escaped_item = item.replace("'", "''").upper()
            conditions.append(f"UPPER(nazva_kompanii) LIKE '%{escaped_item}%'")
        query_parts.append(f"({' OR '.join(conditions)})")

    if not query_parts:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ñ—ñ–ª—å—Ç—Ä.")
    else:
        where_clause = " AND ".join(query_parts)
        final_query = f"SELECT * FROM `{TABLE_ID}` WHERE {where_clause} LIMIT 1000"
        st.code(final_query, language='sql')
        with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç..."):
            results_df = run_query(final_query)
            st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(results_df)} –∑–∞–ø–∏—Å—ñ–≤.")
            st.dataframe(results_df)
