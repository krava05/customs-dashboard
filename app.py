import streamlit as st
from google.cloud import bigquery
import pandas as pd
from google.oauth2 import service_account

# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–ê–†–û–õ–Ø (–æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ) ---
# –ü–∞—Ä–æ–ª—å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö, –Ω–æ —É–∂–µ –≤ Cloud Run
def check_password():
    def password_entered():
        if "APP_PASSWORD" not in st.secrets:
            st.error("–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
            return
        if st.session_state["password"] == st.secrets["APP_PASSWORD"]:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False
    
    # –≠—Ç–∞ —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if "password_correct" not in st.session_state:
        st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password")
        return False
    elif not st.session_state["password_correct"]:
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password")
        return False
    else:
        return True

# --- –û–°–ù–û–í–ù–û–ô –ö–û–î –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
if check_password():
    # --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
    PROJECT_ID = "ua-customs-analytics"
    TABLE_ID = f"{PROJECT_ID}.ua_customs_data.declarations"

    # --- –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (–ù–û–í–´–ô, –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î) ---
    # –ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–Ω—É—Ç—Ä–∏ Google Cloud
    try:
        client = bigquery.Client(project=PROJECT_ID)
        st.session_state['client_ready'] = True
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google: {e}")
        st.session_state['client_ready'] = False

    # --- –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ---
    @st.cache_data
    def load_data(query):
        if st.session_state.get('client_ready', False):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                df = client.query(query).to_dataframe()
                return df
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ BigQuery: {e}")
                return pd.DataFrame()
        return pd.DataFrame()
    
    # --- –ò–ù–¢–ï–†–§–ï–ô–° (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    if st.session_state.get('client_ready', False):
        st.set_page_config(layout="wide")
        st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö")
        st.sidebar.header("–§—ñ–ª—å—Ç—Ä–∏")
        # ... (–≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
        nazva_kompanii = st.sidebar.text_input("–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó")
        kod_yedrpou = st.sidebar.text_input("–ö–æ–¥ –Ñ–î–†–ü–û–£")
        kraina_partner = st.sidebar.text_input("–ö—Ä–∞—ó–Ω–∞-–ø–∞—Ä—Ç–Ω–µ—Ä")
        kod_uktzed = st.sidebar.text_input("–ö–æ–¥ –£–ö–¢–ó–ï–î")
        direction = st.sidebar.selectbox("–ù–∞–ø—Ä—è–º–æ–∫", ["–í—Å–µ", "–Ü–º–ø–æ—Ä—Ç", "–ï–∫—Å–ø–æ—Ä—Ç"])
        query = f"SELECT * FROM `{TABLE_ID}` WHERE 1=1"
        if nazva_kompanii: query += f" AND LOWER(nazva_kompanii) LIKE LOWER('%{nazva_kompanii}%')"
        if kod_yedrpou: query += f" AND kod_yedrpou LIKE '%{kod_yedrpou}%'"
        if kraina_partner: query += f" AND LOWER(kraina_partner) LIKE LOWER('%{kraina_partner}%')"
        if kod_uktzed: query += f" AND kod_uktzed LIKE '%{kod_uktzed}%'"
        if direction != "–í—Å–µ": query += f" AND napryamok = '{direction}'"
        query += " LIMIT 5000"
        df = load_data(query)
        if not df.empty:
            st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ 5000)")
            df['mytna_vartist_hrn'] = pd.to_numeric(df['mytna_vartist_hrn'], errors='coerce')
            df['vaha_netto_kg'] = pd.to_numeric(df['vaha_netto_kg'], errors='coerce')
            total_value = df['mytna_vartist_hrn'].sum()
            total_weight = df['vaha_netto_kg'].sum()
            col1, col2 = st.columns(2)
            col1.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –º–∏—Ç–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å, –≥—Ä–Ω", f"{total_value:,.2f}")
            col2.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞–≥–∞, –∫–≥", f"{total_weight:,.2f}")
            st.dataframe(df)
        else:
            st.warning("–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
