import os
import streamlit as st
from google.cloud import bigquery
import pandas as pd
import google.generativeai as genai
import json

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(
    page_title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
PROJECT_ID = "ua-customs-analytics"
TABLE_ID = f"{PROJECT_ID}.ua_customs_data.declarations"

# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–ê–†–û–õ–Ø ---
def check_password():
    """Returns `True` if the user had a correct password."""
    def password_entered():
        if st.session_state["password"] == st.secrets.get("APP_PASSWORD", os.environ.get("APP_PASSWORD")):
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if st.session_state.get("password_correct", False):
        return True

    st.text_input(
        "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password"
    )
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π.")
    return False

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í GOOGLE ---
def initialize_clients():
    """Initialize BigQuery and GenerativeAI clients and store in session state."""
    if 'clients_initialized' in st.session_state:
        return

    try:
        # –î–ª—è Cloud Run –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if os.environ.get('K_SERVICE'):
            st.session_state.bq_client = bigquery.Client(project=PROJECT_ID)
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GOOGLE_AI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Cloud Run
            api_key = st.secrets.get("GOOGLE_AI_API_KEY", os.environ.get("GOOGLE_AI_API_KEY"))
            if not api_key:
                 st.error("–ö–ª—é—á API –¥–ª—è Google AI –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–æ—á–µ–Ω–Ω—ñ.")
                 st.session_state.genai_ready = False
            else:
                genai.configure(api_key=api_key)
                st.session_state.genai_ready = True
        else: # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à JSON –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏
            SERVICE_ACCOUNT_FILE = "ua-customs-analytics-08c5189db4e4.json"
            st.session_state.bq_client = bigquery.Client.from_service_account_json(SERVICE_ACCOUNT_FILE)
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ secrets.toml –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_key = st.secrets.get("GOOGLE_AI_API_KEY")
            if not api_key:
                 st.error("–î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .streamlit/secrets.toml —Ç–∞ –¥–æ–¥–∞–π—Ç–µ GOOGLE_AI_API_KEY = '–í–∞—à_–∫–ª—é—á'")
                 st.session_state.genai_ready = False
            else:
                 genai.configure(api_key=api_key)
                 st.session_state.genai_ready = True

        st.session_state.clients_initialized = True
        st.session_state.client_ready = True

    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google: {e}")
        st.session_state.client_ready = False
        st.session_state.genai_ready = False

# --- –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ---
@st.cache_data(ttl=600) # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 10 –º–∏–Ω—É—Ç
def run_query(query):
    if st.session_state.get('client_ready', False):
        try:
            return st.session_state.bq_client.query(query).to_dataframe()
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ BigQuery: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø AI-–ü–û–ò–°–ö–ê –¢–û–í–ê–†–û–í ---
def get_ai_search_query(user_query, max_items=100):
    if not st.session_state.get('genai_ready', False):
        st.warning("Google AI –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. AI-–ø–æ—à—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        return None

    prompt = f"""
    Based on the user's request, generate a SQL query for Google BigQuery.
    The table is `{TABLE_ID}`.
    Select the fields: `opis_tovaru`, `nazva_kompanii`, `kraina_partner`, `data_deklaracii`, `mytna_vartist_hrn`, `vaha_netto_kg`.
    Use `REGEXP_CONTAINS` with the `(?i)` flag for case-insensitive search on the `opis_tovaru` field.
    The query must be a simple SELECT statement. Do not use CTEs or subqueries.
    Limit the results to {max_items}.
    Return ONLY a valid JSON object with a single key "sql_query" containing the full SQL string.

    User request: "{user_query}"

    Example of a valid JSON response:
    {{
        "sql_query": "SELECT opis_tovaru, nazva_kompanii, kraina_partner, data_deklaracii, mytna_vartist_hrn, vaha_netto_kg FROM `{TABLE_ID}` WHERE REGEXP_CONTAINS(opis_tovaru, '(?i)some search term') LIMIT 100"
    }}
    """
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        response = model.generate_content(prompt)
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown-–æ–±–µ—Ä—Ç–æ–∫
        response_text = response.text.strip().replace("```json", "").replace("```", "")
        response_json = json.loads(response_text)
        return response_json.get("sql_query")
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó SQL –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI: {e}")
        return None

# --- –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
if not check_password():
    st.stop()

st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö üìà")
initialize_clients()

if st.session_state.get('client_ready', False):
    st.success("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google BigQuery —É—Å–ø—ñ—à–Ω–µ.")
else:
    st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google BigQuery.")
    st.stop()

# --- –í–ö–õ–ê–î–ö–ò ---
tab1, tab2 = st.tabs(["AI-–ü–æ—à—É–∫ –¢–æ–≤–∞—Ä—ñ–≤ ü§ñ", "–ü–∞–Ω–µ–ª—å –§—ñ–ª—å—Ç—Ä—ñ–≤ üìä"])

with tab1:
    st.header("–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –æ–ø–∏—Å–æ–º")
    ai_search_query_text = st.text_input(
        "–û–ø–∏—à—ñ—Ç—å —Ç–æ–≤–∞—Ä, —è–∫–∏–π —à—É–∫–∞—î—Ç–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–∫–∞–≤–∞ –∑–µ—Ä–Ω–æ–≤–∞ –∑ –ö–æ–ª—É–º–±—ñ—ó' –∞–±–æ '–¥–∏—Ç—è—á—ñ —ñ–≥—Ä–∞—à–∫–∏ –∑ –ø–ª–∞—Å—Ç–∏–∫—É')",
        key="ai_search_input"
    )
    search_button = st.button("–ó–Ω–∞–π—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI", type="primary")

    if "ai_search_results" not in st.session_state:
        st.session_state.ai_search_results = pd.DataFrame()

    if search_button and ai_search_query_text:
        with st.spinner("‚ú® AI –≥–µ–Ω–µ—Ä—É—î –∑–∞–ø–∏—Ç —ñ —à—É–∫–∞—î –¥–∞–Ω—ñ..."):
            ai_sql = get_ai_search_query(ai_search_query_text)
            if ai_sql:
                st.code(ai_sql, language='sql')
                st.session_state.ai_search_results = run_query(ai_sql)
            else:
                st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ SQL-–∑–∞–ø–∏—Ç.")
                st.session_state.ai_search_results = pd.DataFrame()

    if not st.session_state.ai_search_results.empty:
        st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ **{len(st.session_state.ai_search_results)}** –∑–∞–ø–∏—Å—ñ–≤.")
        st.dataframe(st.session_state.ai_search_results)
    elif search_button:
        st.info("–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


with tab2:
    st.header("–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö")
    with st.expander("–ü–∞–Ω–µ–ª—å –§—ñ–ª—å—Ç—Ä—ñ–≤", expanded=True):
        # ... (–∑–¥–µ—Å—å –∫–æ–¥ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å—Ç–∞—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        st.write("–¢—É—Ç –±—É–¥—É—Ç—å –≤–∞—à—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ (–∑–∞ –∫–æ–º–ø–∞–Ω—ñ—î—é, –∫–æ–¥–æ–º –£–ö–¢–ó–ï–î —Ç–æ—â–æ).")
        # TODO: –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–Ω—å—à–µ

    # ... (–∑–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è SQL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã)
    # st.dataframe(...)
