import os
import streamlit as st
from google.cloud import bigquery
import pandas as pd
import json
import datetime
import re
import google.generativeai as genai

# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–ê–†–û–õ–Ø ---
def check_password():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è APP_PASSWORD
    def password_entered():
        correct_password = os.environ.get("APP_PASSWORD")
        if correct_password and st.session_state.get("password") == correct_password:
            st.session_state["password_correct"] = True
            if "password" in st.session_state:
                del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if st.session_state.get("password_correct", False):
        return True

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –±—ã–ª –≤–≤–µ–¥–µ–Ω, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π.")
        
    return False

# --- –ò–ù–¢–ï–†–§–ï–ô–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
st.set_page_config(layout="wide")

# –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
if not check_password():
    st.stop() # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞

# --- –ï–°–õ–ò –ü–ê–†–û–õ–¨ –í–ï–†–ù–´–ô, –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–ï –û–°–¢–ê–õ–¨–ù–û–ï ---

st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö")

# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
PROJECT_ID = "ua-customs-analytics"
TABLE_ID = f"{PROJECT_ID}.ua_customs_data.declarations"

# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
try:
    if os.environ.get('K_SERVICE'): # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ Cloud Run
        client = bigquery.Client(project=PROJECT_ID)
    else: # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        LOCAL_JSON_KEY = "ua-customs-analytics-08c5189db4e4.json"
        client = bigquery.Client.from_service_account_json(LOCAL_JSON_KEY)
    st.session_state['client_ready'] = True
except Exception as e:
    st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google: {e}")
    st.session_state['client_ready'] = False

# –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
@st.cache_data
def run_query(query):
    if st.session_state.get('client_ready', False):
        try:
            df = client.query(query).to_dataframe()
            return df
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° –° –§–ò–õ–¨–¢–†–ê–ú–ò
if st.session_state.get('client_ready', False):
    with st.expander("–ü–∞–Ω–µ–ª—å –§—ñ–ª—å—Ç—Ä—ñ–≤", expanded=True):
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            start_date = st.date_input("–î–∞—Ç–∞, –∑", value=None, format="DD.MM.YYYY")
            nazva_kompanii = st.text_input("–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó")
        with col2:
            end_date = st.date_input("–î–∞—Ç–∞, –ø–æ", value=None, format="DD.MM.YYYY")
            kod_yedrpou = st.text_input("–ö–æ–¥ –Ñ–î–†–ü–û–£")
        with col3:
            direction = st.selectbox("–ù–∞–ø—Ä—è–º–æ–∫", ["–í—Å–µ", "–Ü–º–ø–æ—Ä—Ç", "–ï–∫—Å–ø–æ—Ä—Ç"])
            country_list = run_query(f"SELECT DISTINCT kraina_partner FROM `{TABLE_ID}` WHERE kraina_partner IS NOT NULL ORDER BY kraina_partner")['kraina_partner'].tolist()
            kraina_partner = st.multiselect("–ö—Ä–∞—ó–Ω–∞-–ø–∞—Ä—Ç–Ω–µ—Ä", country_list)
        with col4:
            uktzed_list = run_query(f"SELECT DISTINCT kod_uktzed FROM `{TABLE_ID}` WHERE kod_uktzed IS NOT NULL ORDER BY kod_uktzed")['kod_uktzed'].tolist()
            kod_uktzed_filter = st.multiselect("–ö–æ–¥ –£–ö–¢–ó–ï–î", uktzed_list)
            transport_list = run_query(f"SELECT DISTINCT vyd_transportu FROM `{TABLE_ID}` WHERE vyd_transportu IS NOT NULL ORDER BY vyd_transportu")['vyd_transportu'].tolist()
            transport_filter = st.multiselect("–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", transport_list)
        opis_tovaru = st.text_input("–ü–æ—à—É–∫ –ø–æ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É")

    # –ü–û–°–¢–†–û–ï–ù–ò–ï SQL-–ó–ê–ü–†–û–°–ê
    query_parts = [f"SELECT * FROM `{TABLE_ID}` WHERE 1=1"]
    if start_date and end_date:
        if start_date > end_date:
            st.error("–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.")
        else:
            query_parts.append(f" AND data_deklaracii BETWEEN '{start_date.strftime('%Y-%m-%d')}' AND '{end_date.strftime('%Y-%m-%d')}'")
    if nazva_kompanii: query_parts.append(f" AND LOWER(nazva_kompanii) LIKE LOWER('%{nazva_kompanii}%')")
    if kod_yedrpou: query_parts.append(f" AND kod_yedrpou LIKE '%{kod_yedrpou}%'")
    if kraina_partner:
        formatted_countries = ", ".join(["'" + c.replace("'", "''") + "'" for c in kraina_partner])
        query_parts.append(f" AND kraina_partner IN ({formatted_countries})")
    if transport_filter:
        formatted_transports = ", ".join(["'" + t.replace("'", "''") + "'" for t in transport_filter])
        query_parts.append(f" AND vyd_transportu IN ({formatted_transports})")
    if kod_uktzed_filter:
        formatted_uktzed = ", ".join(["'" + c.replace("'", "''") + "'" for c in kod_uktzed_filter])
        query_parts.append(f" AND kod_uktzed IN ({formatted_uktzed})")
    if direction != "–í—Å–µ": query_parts.append(f" AND napryamok = '{direction}'")
    if opis_tovaru: query_parts.append(f" AND LOWER(opis_tovaru) LIKE LOWER('%{opis_tovaru}%')")
    
    query = "".join(query_parts) + " ORDER BY data_deklaracii DESC LIMIT 5000"
    
    # –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –î–ê–ù–ù–´–•
    df = run_query(query)
    if not df.empty:
        df['data_deklaracii'] = pd.to_datetime(df['data_deklaracii'], errors='coerce').dt.strftime('%d.%m.%Y')
        st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å—ñ–≤ (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ 5000)")
        st.dataframe(df, use_container_width=True)
    else:
        st.warning("–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
