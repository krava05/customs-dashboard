import os
import streamlit as st
from google.cloud import bigquery
import pandas as pd
import google.generativeai as genai
import json

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–Ü–Ø –°–¢–û–†–Ü–ù–ö–ò ---
st.set_page_config(page_title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö", layout="wide")

# --- –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ---
PROJECT_ID = "ua-customs-analytics"
TABLE_ID = f"{PROJECT_ID}.ua_customs_data.declarations"

# --- –§–£–ù–ö–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ü–ê–†–û–õ–Æ ---
def check_password():
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    def password_entered():
        if os.environ.get('K_SERVICE'):
            correct_password = os.environ.get("APP_PASSWORD")
        else:
            correct_password = st.secrets.get("APP_PASSWORD")
        if st.session_state.get("password") and st.session_state["password"] == correct_password:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False
    if st.session_state.get("password_correct", False):
        return True
    st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password")
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π.")
    return False

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ö–õ–Ü–Ñ–ù–¢–Ü–í GOOGLE ---
def initialize_clients():
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if 'clients_initialized' in st.session_state:
        return
    try:
        if os.environ.get('K_SERVICE'):
            st.session_state.bq_client = bigquery.Client(project=PROJECT_ID)
            api_key = os.environ.get("GOOGLE_AI_API_KEY")
        else:
            st.session_state.bq_client = bigquery.Client()
            api_key = st.secrets.get("GOOGLE_AI_API_KEY")
        if api_key:
            genai.configure(api_key=api_key)
            st.session_state.genai_ready = True
        st.session_state.clients_initialized = True
        st.session_state.client_ready = True
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google: {e}")
        st.session_state.client_ready = False

# --- –§–£–ù–ö–¶–Ü–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ---
@st.cache_data(ttl=3600)
def run_query(query):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if st.session_state.get('client_ready', False):
        try:
            return st.session_state.bq_client.query(query).to_dataframe()
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ BigQuery: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

# --- –ù–û–í–ê–Ø, –£–ú–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø "AI-–ê–ù–ê–õ–ò–¢–ò–ö" ---
def get_analytical_ai_query(user_question, max_items=50):
    if not st.session_state.get('genai_ready', False):
        return None
    
    prompt = f"""
    You are an expert SQL analyst. Your task is to convert a user's analytical question into a single, executable Google BigQuery SQL query.

    DATABASE SCHEMA:
    The table is `{TABLE_ID}`. Columns are: data_deklaracii, napryamok ('–Ü–º–ø–æ—Ä—Ç' or '–ï–∫—Å–ø–æ—Ä—Ç'), nazva_kompanii, kod_yedrpou, kraina_partner, kod_uktzed, opis_tovaru, mytna_vartist_hrn, vaha_netto_kg, vyd_transportu.
    All text is in Ukrainian. The user's question may be in Russian or Ukrainian.

    INSTRUCTIONS:
    1.  Analyze the user's question to identify key entities (like companies, goods, countries) and metrics (total value, total weight, count of declarations).
    2.  If the user asks for a list of companies (e.g., "importers," "exporters"), you MUST use GROUP BY nazva_kompanii, kod_yedrpou.
    3.  Calculate aggregate metrics: COUNT(*) as declaration_count, SUM(mytna_vartist_hrn) as total_value_hrn, SUM(vaha_netto_kg) as total_weight_kg.
    4.  For semantic search on goods (e.g., "drone parts"), create a broad `REGEXP_CONTAINS` pattern for the `opis_tovaru` column. For "drone parts," search for terms like '–¥—Ä–æ–Ω', '–∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä', '–±–ø–ª–∞', '–±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫', '–ø—Ä–æ–ø–µ–ª–µ—Ä', '–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –¥–æ.*(–¥—Ä–æ–Ω|–±–ø–ª–∞)'.
    5.  Always filter by `napryamok` if the user specifies "importers" (`'–Ü–º–ø–æ—Ä—Ç'`) or "exporters" (`'–ï–∫—Å–ø–æ—Ä—Ç'`).
    6.  Sort the results (`ORDER BY`) by the most relevant metric, usually in descending order (e.g., by total_value_hrn DESC).
    7.  Limit the results to a reasonable number, like {max_items}.
    8.  Return ONLY a valid JSON object with a single key "sql_query" containing the full SQL string.

    USER'S QUESTION: "{user_question}"
    """
    try:
        model = genai.GenerativeModel('models/gemini-pro-latest')
        response = model.generate_content(prompt)
        response_text = response.text.strip().replace("```json", "").replace("```", "")
        response_json = json.loads(response_text)
        return response_json.get("sql_query")
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ–≥–æ SQL –∑–∞–ø–∏—Ç—É: {e}")
        return None

# --- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–ü–ò–°–ö–Ü–í –î–õ–Ø –§–Ü–õ–¨–¢–†–Ü–í ---
@st.cache_data(ttl=3600)
def get_filter_options():
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    options = {}
    options['direction'] = ['–í—Å—ñ', '–Ü–º–ø–æ—Ä—Ç', '–ï–∫—Å–ø–æ—Ä—Ç']
    query_countries = f"SELECT DISTINCT kraina_partner FROM `{TABLE_ID}` WHERE kraina_partner IS NOT NULL ORDER BY kraina_partner"
    options['countries'] = [''] + list(run_query(query_countries)['kraina_partner'])
    query_transport = f"SELECT DISTINCT vyd_transportu FROM `{TABLE_ID}` WHERE vyd_transportu IS NOT NULL ORDER BY vyd_transportu"
    options['transport'] = [''] + list(run_query(query_transport)['vyd_transportu'])
    return options

# --- –û–°–ù–û–í–ù–ò–ô –Ü–ù–¢–ï–†–§–ï–ô–° ---
if not check_password():
    st.stop()

st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö üìà")
initialize_clients()
if not st.session_state.get('client_ready', False):
    st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google BigQuery.")
    st.stop()

# --- –ù–û–í–´–ô –†–ê–ó–î–ï–õ: AI-–ê–ù–ê–õ–ò–¢–ò–ö ---
st.header("ü§ñ AI-–ê–Ω–∞–ª–∏—Ç–∏–∫: –ó–∞–¥–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
ai_analytical_question = st.text_area(
    "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ù–∞–π–¥–∏ —Ç–æ–ø-10 –∏–º–ø–æ—Ä—Ç–µ—Ä–æ–≤ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –¥—Ä–æ–Ω–æ–≤ –ø–æ —Å—É–º–º–µ' –∏–ª–∏ '–ì–ª–∞–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã –ø—à–µ–Ω–∏—Ü—ã –≤ –ü–æ–ª—å—à—É –ø–æ –≤–µ—Å—É'",
    key="ai_analytical_question"
)
search_button_analytical_ai = st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é AI", type="primary")

if search_button_analytical_ai and ai_analytical_question:
    with st.spinner("‚ú® AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥—É–º–∞–µ—Ç –∏ –ø–∏—à–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å..."):
        analytical_sql = get_analytical_ai_query(ai_analytical_question)
        if analytical_sql:
            st.subheader("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å:")
            st.code(analytical_sql, language='sql')
            with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Å–∫–ª–∞–¥–Ω–∏–π –∑–∞–ø–∏—Ç..."):
                analytical_results_df = run_query(analytical_sql)
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                st.success(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(analytical_results_df)} –∑–∞–ø–∏—Å–µ–π.")
                st.dataframe(analytical_results_df)
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π SQL-–∑–∞–ø—Ä–æ—Å.")

st.divider()

# --- –°–ï–ö–¶–ò–Ø –§–ò–õ–¨–¢–†–û–í ---
st.header("üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö")
filter_options = get_filter_options()
# ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
with st.expander("–ü–∞–Ω–µ–ª—å –§—ñ–ª—å—Ç—Ä—ñ–≤", expanded=True):
    col1, col2, col3 = st.columns(3)
    with col1:
        direction = st.selectbox("–ù–∞–ø—Ä—è–º–æ–∫:", options=filter_options['direction'])
    with col2:
        country = st.selectbox("–ö—Ä–∞—ó–Ω–∞-–ø–∞—Ä—Ç–Ω–µ—Ä:", options=filter_options['countries'])
    with col3:
        transport = st.selectbox("–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:", options=filter_options['transport'])
    col4, col5, col6 = st.columns(3)
    with col4:
        uktzed = st.text_input("–ö–æ–¥ –£–ö–¢–ó–ï–î (–º–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω—É):")
    with col5:
        yedrpou = st.text_input("–ö–æ–¥ –Ñ–î–†–ü–û–£ —Ñ—ñ—Ä–º–∏:")
    with col6:
        company = st.text_input("–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó:")
    search_button_filters = st.button("üîç –ó–Ω–∞–π—Ç–∏ –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏")
if search_button_filters:
    query_parts = []
    if direction and direction != '–í—Å—ñ':
        query_parts.append(f"napryamok = '{direction}'")
    if company:
        sanitized_company = company.replace("'", "''").upper()
        query_parts.append(f"UPPER(nazva_kompanii) LIKE '%{sanitized_company}%'")
    if country:
        sanitized_country = country.replace("'", "''")
        query_parts.append(f"kraina_partner = '{sanitized_country}'")
    if transport:
        sanitized_transport = transport.replace("'", "''")
        query_parts.append(f"vyd_transportu = '{sanitized_transport}'")
    if uktzed:
        query_parts.append(f"kod_uktzed LIKE '{uktzed}%'")
    if yedrpou:
        query_parts.append(f"kod_yedrpou = '{yedrpou}'")
    if not query_parts:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ñ—ñ–ª—å—Ç—Ä.")
    else:
        where_clause = " AND ".join(query_parts)
        final_query = f"SELECT * FROM `{TABLE_ID}` WHERE {where_clause} LIMIT 1000"
        st.code(final_query, language='sql')
        with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç..."):
            results_df = run_query(final_query)
            st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(results_df)} –∑–∞–ø–∏—Å—ñ–≤.")
            st.dataframe(results_df)
