import os
import streamlit as st
from google.cloud import bigquery
import pandas as pd
import json
import datetime
import re
import google.generativeai as genai

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
PROJECT_ID = "ua-customs-analytics"
TABLE_ID = f"{PROJECT_ID}.ua_customs_data.declarations"
LOCAL_JSON_KEY = "ua-customs-analytics-08c5189db4e4.json"

# --- –§–£–ù–ö–¶–Ü–Ø –ü–†–û–í–ï–†–ö–ò –ü–ê–†–û–õ–Ø ---
def check_password():
    def password_entered():
        correct_password = ""
        if "APP_PASSWORD" in st.secrets:
            correct_password = st.secrets["APP_PASSWORD"]
        else:
            correct_password = os.environ.get("APP_PASSWORD")
        if correct_password and st.session_state["password"] == correct_password:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False
    
    if ("APP_PASSWORD" not in st.secrets) and (not os.environ.get("APP_PASSWORD")):
        st.error("–ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    if "password_correct" not in st.session_state:
        st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password")
        return False
    elif not st.session_state["password_correct"]:
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π.")
        st.text_input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password")
        return False
    else:
        return True

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò SQL –° –ü–û–ú–û–©–¨–Æ –ò–ò ---
def generate_sql_from_prompt(user_question):
    try:
        api_key = st.secrets.get("GOOGLE_API_KEY") if 'GOOGLE_API_KEY' in st.secrets else os.environ.get("GOOGLE_API_KEY")
        if not api_key:
            st.error("API –∫–ª—é—á –¥–ª—è Google AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return None
        
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('models/gemini-pro-latest')

        prompt = f"""
        –¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç...
        –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_question}"
        SQL-–∑–∞–ø—Ä–æ—Å:
        """
        response = model.generate_content(prompt)
        sql_query = re.sub(r"```sql|```", "", response.text).strip()
        return sql_query
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó SQL: {e}")
        return None

# --- –û–°–ù–û–í–ù–û–ô –ö–û–î –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
os.environ.setdefault('APP_PASSWORD', '123456')

if check_password():
    try:
        if os.environ.get('K_SERVICE'):
            client = bigquery.Client(project=PROJECT_ID)
        else:
            client = bigquery.Client.from_service_account_json(LOCAL_JSON_KEY)
        st.session_state['client_ready'] = True
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google Cloud: {e}")
        st.session_state['client_ready'] = False

    @st.cache_data
    def run_query(query):
        if st.session_state.get('client_ready', False):
            try:
                df = client.query(query).to_dataframe()
                return df
            except Exception as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É: {e}")
                st.code(query)
                return pd.DataFrame()
        return pd.DataFrame()

    if st.session_state.get('client_ready', False):
        st.set_page_config(layout="wide")
        st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö")

        tab1, tab2 = st.tabs(["–ü–æ—à—É–∫ –∑–∞ –§—ñ–ª—å—Ç—Ä–∞–º–∏", "AI-–ü–æ—à—É–∫"])

        with tab1:
            with st.expander("–ü–∞–Ω–µ–ª—å –§—ñ–ª—å—Ç—Ä—ñ–≤", expanded=True):
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    start_date = st.date_input("–î–∞—Ç–∞, –∑", value=None, format="DD.MM.YYYY")
                    nazva_kompanii = st.text_input("–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó")
                with col2:
                    end_date = st.date_input("–î–∞—Ç–∞, –ø–æ", value=None, format="DD.MM.YYYY")
                    kod_yedrpou = st.text_input("–ö–æ–¥ –Ñ–î–†–ü–û–£")
                with col3:
                    direction = st.selectbox("–ù–∞–ø—Ä—è–º–æ–∫", ["–í—Å–µ", "–Ü–º–ø–æ—Ä—Ç", "–ï–∫—Å–ø–æ—Ä—Ç"], key="manual_direction")
                    country_list = run_query(f"SELECT DISTINCT kraina_partner FROM `{TABLE_ID}` WHERE kraina_partner IS NOT NULL ORDER BY kraina_partner")['kraina_partner'].tolist()
                    kraina_partner = st.multiselect("–ö—Ä–∞—ó–Ω–∞-–ø–∞—Ä—Ç–Ω–µ—Ä", country_list)
                with col4:
                    uktzed_list = run_query(f"SELECT DISTINCT kod_uktzed FROM `{TABLE_ID}` WHERE kod_uktzed IS NOT NULL ORDER BY kod_uktzed")['kod_uktzed'].tolist()
                    kod_uktzed_filter = st.multiselect("–ö–æ–¥ –£–ö–¢–ó–ï–î", uktzed_list)
                    transport_list = run_query(f"SELECT DISTINCT vyd_transportu FROM `{TABLE_ID}` WHERE vyd_transportu IS NOT NULL ORDER BY vyd_transportu")['vyd_transportu'].tolist()
                    transport_filter = st.multiselect("–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", transport_list)
                opis_tovaru = st.text_input("–ü–æ—à—É–∫ –ø–æ –æ–ø–∏—Å—É —Ç–æ–≤–∞—Ä—É")

            query_parts = [f"SELECT * FROM `{TABLE_ID}` WHERE 1=1"]
            if start_date and end_date:
                if start_date > end_date: st.error("–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.")
                else: query_parts.append(f" AND data_deklaracii BETWEEN '{start_date.strftime('%Y-%m-%d')}' AND '{end_date.strftime('%Y-%m-%d')}'")
            if nazva_kompanii: query_parts.append(f" AND LOWER(nazva_kompanii) LIKE LOWER('%{nazva_kompanii}%')")
            if kod_yedrpou: query_parts.append(f" AND kod_yedrpou LIKE '%{kod_yedrpou}%'")
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –∏ –Ω–∞–¥–µ–∂–Ω—É—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é —Å—Ç—Ä–æ–∫ ---
            if kraina_partner:
                formatted_countries = ", ".join(["'" + c.replace("'", "''") + "'" for c in kraina_partner])
                query_parts.append(f" AND kraina_partner IN ({formatted_countries})")
            if transport_filter:
                formatted_transports = ", ".join(["'" + t.replace("'", "''") + "'" for t in transport_filter])
                query_parts.append(f" AND vyd_transportu IN ({formatted_transports})")
            if kod_uktzed_filter:
                formatted_uktzed = ", ".join(["'" + c.replace("'", "''") + "'" for c in kod_uktzed_filter])
                query_parts.append(f" AND kod_uktzed IN ({formatted_uktzed})")
            
            if direction != "–í—Å–µ": query_parts.append(f" AND napryamok = '{direction}'")
            if opis_tovaru: query_parts.append(f" AND LOWER(opis_tovaru) LIKE LOWER('%{opis_tovaru}%')")
            
            manual_query = "".join(query_parts) + " ORDER BY data_deklaracii DESC LIMIT 5000"
            df_manual = run_query(manual_query)
            
            if not df_manual.empty:
                st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(df_manual)} –∑–∞–ø–∏—Å—ñ–≤ (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ 5000)")
                df_manual['data_deklaracii'] = pd.to_datetime(df_manual['data_deklaracii'], errors='coerce').dt.strftime('%d.%m.%Y')
                df_manual['kod_yedrpou'] = pd.to_numeric(df_manual['kod_yedrpou'], errors='coerce').fillna(0).astype(int).astype(str).replace('0', '')
                st.dataframe(df_manual, use_container_width=True)
            else:
                st.warning("–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        with tab2:
            st.subheader("–ü–æ—à—É–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®—Ç—É—á–Ω–æ–≥–æ –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É")
            ai_question = st.text_area("–ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ø–æ–∫–∞–∂–∏ 5 –Ω–∞–π–±—ñ–ª—å—à–∏—Ö —ñ–º–ø–æ—Ä—Ç–µ—Ä—ñ–≤ –∑ –ü–æ–ª—å—â—ñ –ø–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ')", height=100, key="ai_question")
            
            if st.button("–ó–Ω–∞–π—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI"):
                if ai_question:
                    with st.spinner("–Ü–Ü –≥–µ–Ω–µ—Ä—É—î SQL-–∑–∞–ø–∏—Ç..."):
                        sql_query = generate_sql_from_prompt(ai_question)
                    if sql_query:
                        st.success("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π SQL-–∑–∞–ø–∏—Ç:")
                        st.code(sql_query, language="sql")
                        with st.spinner("–í–∏–∫–æ–Ω—É—é –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."):
                            df_ai = run_query(sql_query)
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç AI-–ø–æ—à—É–∫—É")
                        if not df_ai.empty:
                            df_ai['data_deklaracii'] = pd.to_datetime(df_ai['data_deklaracii'], errors='coerce').dt.strftime('%d.%m.%Y')
                            df_ai['kod_yedrpou'] = pd.to_numeric(df_ai['kod_yedrpou'], errors='coerce').fillna(0).astype(int).astype(str).replace('0', '')
                            st.dataframe(df_ai, use_container_width=True)
                        else:
                            st.warning("–ó–∞ –≤–∞—à–∏–º AI-–∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è AI.")
