import os
import streamlit as st
from google.cloud import bigquery
import pandas as pd
import google.generativeai as genai
import json

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–Ü–Ø –°–¢–û–†–Ü–ù–ö–ò ---
st.set_page_config(
    page_title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö",
    layout="wide"
)

# --- –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ---
PROJECT_ID = "ua-customs-analytics"
TABLE_ID = f"{PROJECT_ID}.ua_customs_data.declarations"

# --- –§–£–ù–ö–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –ü–ê–†–û–õ–Æ ---
# ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def check_password():
    def password_entered():
        if os.environ.get('K_SERVICE'):
            correct_password = os.environ.get("APP_PASSWORD")
        else:
            correct_password = st.secrets.get("APP_PASSWORD")
        if st.session_state.get("password") and st.session_state["password"] == correct_password:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False
    if st.session_state.get("password_correct", False):
        return True
    st.text_input(
        "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É", type="password", on_change=password_entered, key="password"
    )
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤—ñ—Ä–Ω–∏–π.")
    return False

# --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ö–õ–Ü–Ñ–ù–¢–Ü–í GOOGLE ---
# ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def initialize_clients():
    if 'clients_initialized' in st.session_state:
        return
    try:
        if os.environ.get('K_SERVICE'):
            st.session_state.bq_client = bigquery.Client(project=PROJECT_ID)
            api_key = os.environ.get("GOOGLE_AI_API_KEY")
        else:
            st.session_state.bq_client = bigquery.Client()
            api_key = st.secrets.get("GOOGLE_AI_API_KEY")
        if api_key:
            genai.configure(api_key=api_key)
            st.session_state.genai_ready = True
        st.session_state.clients_initialized = True
        st.session_state.client_ready = True
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ Google: {e}")
        st.session_state.client_ready = False

# --- –§–£–ù–ö–¶–Ü–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• ---
# ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@st.cache_data(ttl=3600)
def run_query(query):
    if st.session_state.get('client_ready', False):
        try:
            return st.session_state.bq_client.query(query).to_dataframe()
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ BigQuery: {e}")
            return pd.DataFrame()
    return pd.DataFrame()

# --- –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø AI-–ü–û–®–£–ö–£ ---
# ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
def get_ai_search_query(user_query, max_items=100):
    # ...
    return None

# --- –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–ü–ò–°–ö–Ü–í –î–õ–Ø –§–Ü–õ–¨–¢–†–Ü–í ---
@st.cache_data(ttl=3600)
def get_filter_options():
    options = {}
    # –°—Ç–∞—Ç–∏—á–Ω—ñ –æ–ø—Ü—ñ—ó
    options['direction'] = ['', '–Ü–º–ø–æ—Ä—Ç', '–ï–∫—Å–ø–æ—Ä—Ç']
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±—Ä–∞–ª–∏ –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–π >>>
    # –î–∏–Ω–∞–º—ñ—á–Ω—ñ –æ–ø—Ü—ñ—ó –∑ BigQuery
    query_countries = f"SELECT DISTINCT kraina_partner FROM `{TABLE_ID}` WHERE kraina_partner IS NOT NULL ORDER BY kraina_partner"
    options['countries'] = [''] + list(run_query(query_countries)['kraina_partner'])
    query_transport = f"SELECT DISTINCT vyd_transportu FROM `{TABLE_ID}` WHERE vyd_transportu IS NOT NULL ORDER BY vyd_transportu"
    options['transport'] = [''] + list(run_query(query_transport)['vyd_transportu'])
    return options

# --- –û–°–ù–û–í–ù–ò–ô –Ü–ù–¢–ï–†–§–ï–ô–° ---
if not check_password():
    st.stop()

st.title("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–∏—Ç–Ω–∏—Ö –î–∞–Ω–∏—Ö üìà")
initialize_clients()

if not st.session_state.get('client_ready', False):
    st.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Google BigQuery.")
    st.stop()

# --- –°–ï–ö–¶–Ü–Ø AI-–ü–û–®–£–ö–£ ---
# ... (–∫–æ–¥ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
st.header("ü§ñ –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –æ–ø–∏—Å–æ–º")
ai_search_query_text = st.text_input("–û–ø–∏—à—ñ—Ç—å —Ç–æ–≤–∞—Ä, —è–∫–∏–π —à—É–∫–∞—î—Ç–µ...", key="ai_search_input")
# ...

st.divider()

# --- –°–ï–ö–¶–Ü–Ø –§–Ü–õ–¨–¢–†–Ü–í ---
st.header("üìä –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö")
filter_options = get_filter_options()

with st.expander("–ü–∞–Ω–µ–ª—å –§—ñ–ª—å—Ç—Ä—ñ–≤", expanded=True):
    col1, col2, col3 = st.columns(3)
    with col1:
        direction = st.selectbox("–ù–∞–ø—Ä—è–º–æ–∫:", options=filter_options['direction'])
    with col2:
        country = st.selectbox("–ö—Ä–∞—ó–Ω–∞-–ø–∞—Ä—Ç–Ω–µ—Ä:", options=filter_options['countries'])
    with col3:
        transport = st.selectbox("–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É:", options=filter_options['transport'])

    col4, col5 = st.columns([1, 3])
    with col4:
        uktzed = st.text_input("–ö–æ–¥ –£–ö–¢–ó–ï–î (–º–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω—É):")
    with col5:
        # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω–∏–ª–∏ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ >>>
        company = st.text_input("–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó (–º–æ–∂–Ω–∞ —á–∞—Å—Ç–∏–Ω—É):")

    search_button_filters = st.button("üîç –ó–Ω–∞–π—Ç–∏ –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏")

# --- –õ–û–ì–Ü–ö–ê –§–û–†–ú–£–í–ê–ù–ù–Ø –ó–ê–ü–ò–¢–£ ---
if search_button_filters:
    query_parts = []
    if direction:
        query_parts.append(f"napryamok = '{direction}'")
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏–ª–∏ –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ >>>
    if company:
        query_parts.append(f"nazva_kompanii LIKE '%{company.replace(\"'\", \"''\").upper()}%'")
    if country:
        query_parts.append(f"kraina_partner = '{country.replace(\"'\", \"''\")}'")
    if transport:
        query_parts.append(f"vyd_transportu = '{transport.replace(\"'\", \"''\")}'")
    if uktzed:
        query_parts.append(f"kod_uktzed LIKE '{uktzed}%'")

    if not query_parts:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ñ—ñ–ª—å—Ç—Ä.")
    else:
        where_clause = " AND ".join(query_parts)
        final_query = f"SELECT * FROM `{TABLE_ID}` WHERE {where_clause} LIMIT 1000"
        st.code(final_query, language='sql')
        with st.spinner("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç..."):
            results_df = run_query(final_query)
            st.success(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(results_df)} –∑–∞–ø–∏—Å—ñ–≤.")
            st.dataframe(results_df)
